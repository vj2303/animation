'use client';

import { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';

// Separate component for rendering the dotted path
const DottedPathRenderer = forwardRef(({ scrollOffset }, ref) => {
  const pathWrapperRef = useRef(null);

  const createDottedPath = () => {
    const wrapper = pathWrapperRef.current;
    if (!wrapper) return;
    
    wrapper.innerHTML = ''; // Clear existing dots
    
    // Create more rows to account for scrolling (50 rows total)
    for (let row = 0; row < 50; row++) {
      const adjustedRow = row + scrollOffset;
      const progress = adjustedRow / 49;
      const distance = row * 40;
      const scale = Math.max(0.1, 1 - (progress * 0.8));
      const dotSize = 8 * scale;
      const opacity = Math.max(0.1, 1 - (progress * 0.7));
      const rowWidth = Math.max(50, 300 - (progress * 150));
      
      // Calculate curve offset - creates an S-curve
      const curveOffset = Math.sin(adjustedRow * 0.3) * (80 - adjustedRow * 1.5);
      
      // Create row container
      const rowDiv = document.createElement('div');
      rowDiv.className = 'dot-row';
      rowDiv.style.position = 'absolute';
      rowDiv.style.display = 'flex';
      rowDiv.style.justifyContent = 'space-between';
      rowDiv.style.left = '50%';
      rowDiv.style.top = `${50 + distance}px`;
      rowDiv.style.width = `${rowWidth}px`;
      rowDiv.style.opacity = opacity;
      rowDiv.style.transform = `translateX(calc(-50% + ${curveOffset}px))`;
      
      // Create 8 dots for this row
      for (let col = 0; col < 8; col++) {
        const dot = document.createElement('div');
        dot.style.backgroundColor = '#4b5563';
        dot.style.borderRadius = '50%';
        dot.style.width = `${dotSize}px`;
        dot.style.height = `${dotSize}px`;
        dot.style.boxShadow = `0 0 ${dotSize * 0.5}px rgba(0,0,0,0.3)`;
        
        rowDiv.appendChild(dot);
      }
      
      wrapper.appendChild(rowDiv);
    }
  };

  // Expose the createDottedPath function to parent component
  useImperativeHandle(ref, () => ({
    createDottedPath
  }));

  useEffect(() => {
    createDottedPath();
  }, [scrollOffset]);

  return (
    <div 
      ref={pathWrapperRef}
      style={{
        position: 'absolute',
        inset: '0',
        transformOrigin: 'center center',
        transformStyle: 'preserve-3d'
      }}
    >
      {/* Dots will be generated by JavaScript */}
    </div>
  );
});

DottedPathRenderer.displayName = 'DottedPathRenderer';

export default DottedPathRenderer;